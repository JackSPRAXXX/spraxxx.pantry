"""
SPRAXXX Pantry – Simulation Logger Module
Purpose: Provide real-time logging and statistics for batch simulations
Ethical: Nonprofit-only, outputs cannot be monetized
Branding: Always use SPRAXXX (S-P-R-A-X-X-X)
"""

import time
import sys
from typing import Dict, Any, List


class SimulationLogger:
    """
    Handles logging and real-time statistics display for SPRAXXX Pantry simulations.
    Emphasizes transparency and stewardship in line with cosmic community principles.
    """
    
    def __init__(self, verbose=True):
        """
        Initialize the simulation logger.
        
        Args:
            verbose: Whether to display real-time progress information
        """
        self.verbose = verbose
        self.start_time = None
        self.log_entries = []
        self.simulation_stats = {
            "bots_processed": 0,
            "total_tasks": 0,
            "total_yield": 0,
            "total_credits": 0,
            "errors": 0,
            "start_time": None,
            "end_time": None
        }
    
    def start_simulation(self, num_bots: int, simulation_name: str = "SPRAXXX Batch Simulation"):
        """
        Log the start of a simulation.
        
        Args:
            num_bots: Number of bots in the simulation
            simulation_name: Name of the simulation
        """
        self.start_time = time.time()
        self.simulation_stats["start_time"] = self.start_time
        
        self.log("simulation_start", {
            "simulation_name": simulation_name,
            "num_bots": num_bots,
            "start_time": self.start_time
        })
        
        if self.verbose:
            print(f"\n🚀 Starting {simulation_name}")
            print(f"📊 Batch size: {num_bots} bots")
            print(f"⏰ Started at: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(self.start_time))}")
            print("="*60)
    
    def log_bot_processed(self, bot_id: str, output: Dict[str, Any], credits_awarded: int):
        """
        Log when a bot has been processed.
        
        Args:
            bot_id: ID of the processed bot
            output: Output generated by the bot
            credits_awarded: Credits awarded to the bot
        """
        self.simulation_stats["bots_processed"] += 1
        self.simulation_stats["total_tasks"] += 1
        self.simulation_stats["total_yield"] += output.get("yield_amount", 0)
        self.simulation_stats["total_credits"] += credits_awarded
        
        self.log("bot_processed", {
            "bot_id": bot_id,
            "task": output.get("task", "unknown"),
            "yield": output.get("yield_amount", 0),
            "credits": credits_awarded,
            "quality": output.get("quality_score", 0)
        })
        
        if self.verbose and self.simulation_stats["bots_processed"] % 10 == 0:
            self._print_progress_update()
    
    def log_error(self, error_type: str, details: Dict[str, Any]):
        """
        Log an error that occurred during simulation.
        
        Args:
            error_type: Type of error
            details: Error details
        """
        self.simulation_stats["errors"] += 1
        
        self.log("error", {
            "error_type": error_type,
            "details": details
        })
        
        if self.verbose:
            print(f"⚠️  Error: {error_type} - {details}")
    
    def log(self, event_type: str, data: Dict[str, Any]):
        """
        Log a general event with timestamp.
        
        Args:
            event_type: Type of event being logged
            data: Event data
        """
        entry = {
            "timestamp": time.time(),
            "event_type": event_type,
            "data": data
        }
        self.log_entries.append(entry)
    
    def _print_progress_update(self):
        """Print a progress update to console."""
        elapsed = time.time() - self.start_time
        rate = self.simulation_stats["bots_processed"] / elapsed if elapsed > 0 else 0
        
        print(f"📈 Progress: {self.simulation_stats['bots_processed']} bots processed "
              f"({rate:.1f} bots/sec) | "
              f"Yield: {self.simulation_stats['total_yield']} | "
              f"Credits: {self.simulation_stats['total_credits']}")
    
    def end_simulation(self):
        """Log the end of simulation and display final statistics."""
        self.simulation_stats["end_time"] = time.time()
        duration = self.simulation_stats["end_time"] - self.start_time
        
        self.log("simulation_end", {
            "end_time": self.simulation_stats["end_time"],
            "duration": duration,
            "final_stats": self.simulation_stats.copy()
        })
        
        if self.verbose:
            self._print_final_report(duration)
    
    def _print_final_report(self, duration: float):
        """Print final simulation report."""
        print("\n" + "="*60)
        print("🎉 SPRAXXX Pantry Simulation Complete!")
        print("="*60)
        print(f"⏱️  Duration: {duration:.2f} seconds")
        print(f"🤖 Bots Processed: {self.simulation_stats['bots_processed']}")
        print(f"📋 Total Tasks: {self.simulation_stats['total_tasks']}")
        print(f"🌾 Total Yield: {self.simulation_stats['total_yield']}")
        print(f"💰 Total Credits: {self.simulation_stats['total_credits']}")
        
        if self.simulation_stats["errors"] > 0:
            print(f"⚠️  Errors: {self.simulation_stats['errors']}")
        
        avg_rate = self.simulation_stats["bots_processed"] / duration if duration > 0 else 0
        print(f"⚡ Average Rate: {avg_rate:.2f} bots/second")
        
        print("\n🌟 All outputs dedicated to nonprofit and charitable purposes")
        print("🤝 Serving the cosmic community through ethical stewardship")
        print("="*60)
    
    def get_statistics(self) -> Dict[str, Any]:
        """Get current simulation statistics."""
        return self.simulation_stats.copy()
    
    def get_log_entries(self) -> List[Dict[str, Any]]:
        """Get all log entries."""
        return self.log_entries.copy()
    
    def generate_detailed_report(self) -> str:
        """Generate a comprehensive text report of the simulation."""
        lines = []
        lines.append("SPRAXXX Pantry Simulation Detailed Report")
        lines.append("=" * 50)
        
        if self.simulation_stats["start_time"]:
            start_str = time.strftime('%Y-%m-%d %H:%M:%S', 
                                    time.localtime(self.simulation_stats["start_time"]))
            lines.append(f"Start Time: {start_str}")
        
        if self.simulation_stats["end_time"]:
            end_str = time.strftime('%Y-%m-%d %H:%M:%S', 
                                  time.localtime(self.simulation_stats["end_time"]))
            duration = self.simulation_stats["end_time"] - self.simulation_stats["start_time"]
            lines.append(f"End Time: {end_str}")
            lines.append(f"Duration: {duration:.2f} seconds")
        
        lines.append(f"Bots Processed: {self.simulation_stats['bots_processed']}")
        lines.append(f"Total Tasks: {self.simulation_stats['total_tasks']}")
        lines.append(f"Total Yield: {self.simulation_stats['total_yield']}")
        lines.append(f"Total Credits: {self.simulation_stats['total_credits']}")
        lines.append(f"Errors: {self.simulation_stats['errors']}")
        
        lines.append("\nEvent Log Summary:")
        event_counts = {}
        for entry in self.log_entries:
            event_type = entry["event_type"]
            event_counts[event_type] = event_counts.get(event_type, 0) + 1
        
        for event_type, count in event_counts.items():
            lines.append(f"  {event_type}: {count} events")
        
        lines.append("\n--- End of Report ---")
        lines.append("All outputs are nonprofit-only and ethically processed.")
        
        return "\n".join(lines)